name: Package & release AppImage

on:
  schedule:
    - cron: "0 0 * * *"  # Se ejecuta a las 12:00 AM UTC cada día
  workflow_dispatch:     # Permite la ejecución manual del workflow  
  push:
    branches:
      - main

permissions:
  contents: write  # Permitir escritura en el repositorio (incluyendo tags)

jobs:
  generate-appimage:
    name: Generate and publish AppImage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download latest binaries
        run: |
          binariesurl=$(cat app.desktop | grep Binaries-Url)
          IFS="=" read -r name url <<< "$binariesurl"
          wget -q -O binaries.tar.gz $url

      - name: Unpack binaries
        run: |
          tar -xzf ./binaries.tar.gz

      - name: Generate AppImage
        id: generate-appimage-file
        uses: Emiliopg91/AppImage-Creator-2@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          electron: false

      - name: Check for AppImage file
        id: check_appimage
        run: |
          appimage_file=$(ls ${GITHUB_WORKSPACE}/output/*.AppImage 2>/dev/null | head -n 1 | xargs -n 1 basename)
          if [ -n "$appimage_file" ]; then
            echo "APPIMAGE_NAME=$appimage_file" >> $GITHUB_ENV
          else
            echo "APPIMAGE_NAME=none" >> $GITHUB_ENV
          fi

      - name: Create GitHub Release
        id: create_release
        if: env.APPIMAGE_NAME != 'none'
        uses: marvinpinto/action-automatic-releases@latest
        with:
          title: ${{ env.APP_VERSION }}
          automatic_release_tag: ${{ env.APP_VERSION }}
          prerelease: false
          files: |
            binaries.tar.gz
            ${{ env.APPIMAGE_PATH }}
            ${{ env.APPIMAGE_PATH }}.msync
            ${{ env.APPIMAGE_PATH }}.zsync
          repo_token: ${{ secrets.GITHUB_TOKEN }}
